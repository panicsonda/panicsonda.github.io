name: Update Submodule and Extract

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-submodule:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: false  # Do not auto-fetch submodules at checkout
        fetch-depth: 0     # Fetch all history for changes

    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    # Initialize and update the submodule in the .public folder
    - name: Initialize and update submodule in .public
      run: |
        # Remove existing .public folder if present (to avoid issues with stale files)
        rm -rf .public

        # Initialize the submodule and update it to the latest commit
        git submodule init
        git submodule update --remote --recursive --force

    # Check if there are changes in the submodule
    - name: Check for changes in submodule
      id: check_changes
      run: |
        cd .public
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_ENV
        else
          echo "changes=false" >> $GITHUB_ENV
        fi

    # If changes are detected, delete the old files in the root directory and extract the new ones
    - name: Deploy submodule to root directory
      if: env.changes == 'true'
      run: |
        echo "Changes detected. Deploying new files."

        # Delete all files and folders in the root directory except .public and .git
        find . -maxdepth 1 -mindepth 1 ! -name '.public' ! -name '.git' -exec rm -rf {} \;

        # Copy the contents of the .public folder to the root directory
        cp -r .public/* ./
        cp -r .public/.[^.]* ./  # Copy hidden files (dotfiles)

        # Stage and commit the new changes
        git add .
        git commit -m "Updated submodule and deployed new files"
        git push origin HEAD

    # If no changes are detected, do nothing
    - name: No changes found
      if: env.changes == 'false'
      run: |
        echo "No changes detected in submodule. Nothing to do."
